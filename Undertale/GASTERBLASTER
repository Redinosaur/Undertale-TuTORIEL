package main;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingWorker;

import lib.Constants;
import attackCombo.BoneJump;
import attackCombo.Combo;
import attackCombo.GravityBoneSmash;

/**
 * This class will initialize the frame and its contents
 * 
 * @author Alden Bauman
 * @edited Euan Fotheringham
 *
 */
public class UltraClass 
{

	public JFrame frame;
	
	String gasterPath = "/images/gaster.png";
	String blastPath = "/images/blast.png";
	String gasterOpen = "/images/gaster2.png";

	private ImageIcon icon;
	private ImageIcon image;
		
	private final int DOWN = 0,
	LEFT = 1,
	UP = 2,
	RIGHT = 3,
	BUTTON_WIDTH = 220,
	BUTTON_HEIGHT = 84,
	MAX_HEALTH = 93,
	WINDOW_LENGTH = 1148,
	WINDOW_HEIGHT = 800,
	HEART_MOVE = 230;
	
	int count1 = 0;
	
	Random ran = new Random();
	
	int num = ran.nextInt(500) + 200;
	
	int countMove = 0;
	
	boolean firing = false;
	
	private final double GRAVITY = .08;
	
	ArrayList <ImageIcon> text = new ArrayList <ImageIcon>();
	ArrayList <ImageIcon> health = new ArrayList <ImageIcon>();
	ArrayList <ArrayList<String>> battleSequence = new ArrayList <ArrayList<String>> ();
	ArrayList <Combo> attacks = new ArrayList <Combo> ();
	String attack = new String();
	
	private int battler = -1;
	
	private Scanner in = new Scanner(UltraClass.class.getResourceAsStream(Constants.sansFight));
	private String move = new String();
	public static ArrayList <String> fightOrder = new ArrayList <String> ();
	
	ImageIcon damageTaken = new ImageIcon(UltraClass.class.getResource(Constants.healthEmpty));
	ImageIcon healed = new ImageIcon(UltraClass.class.getResource(Constants.healthFull));
	
								//default dimensions and starting position for battle box
	private int selected = 0,		//											//
	x = 100, 						//			\		   / /\					//
	y = 300, 						//			 \        / /  \				//
	length = 500, 					//			  \		 / / 	\				//
	height = 200, 					//			   \	/ /      \   			//
	heartStartX = 133,				//			 	\  / /	   	  \				//
	heartStartY = 700,				//				 \/ /	  	   \			//
									//											//
								//default dimensions and starting position for battle box
	
	lineWidth = 4,
	currentHealth = MAX_HEALTH,
	start = 0,
	damage = MAX_HEALTH;

	public int boneLength = 20;

	private int battleProgression = 0;
	private int currentMove = 0;

	private int count = 0;

	private int gravityDirection = 0;
	
	private double gravityFall = 0;
	
	private boolean damaged = false,
	gravity = false,
	jumped = false,
	falling = true,
	collision = false;
	
	private JLabel health1,
	health2,
	fight,
	item,
	mercy,
	gaster,
	blast,
	act;

	public JLabel heart;
	
	public JLabel sans;

	public JLabel boxTop;

	public JLabel boxLeft;

	public JLabel boxRight;

	public JLabel boxBottom;

	JLabel bone;

	JLabel boneShaft;

	JLabel boneTop;

	JLabel topShaft;
	
	public ArrayList <JLabel> boneAttack = new ArrayList <JLabel>();
	public ArrayList <JLabel> healthBar = new ArrayList <JLabel>();
	public ArrayList <Integer> direction = new ArrayList <Integer> ();
	public ArrayList <Integer> boneType = new ArrayList <Integer> ();
	
	boolean rightPressed = false,
	leftPressed = false,
	upPressed = false,
	downPressed = false;
	
	int battle = 0;
	
	public static int boneStart = 0;
	

	/**
	 * Create the application.
	 */
	public UltraClass() 
	{
		initialize();
		frame.setVisible(true);
		movePlayer.run();
	}//end of UltraClass

	/**
	 * Initializes frame
	 * @pre		none
	 * @param	none
	 * @return	none
	 * @post	contents of screen printed
	 */
	public void initialize() 
	{	
		//music
		try
		{
			File audioFile = new File(Constants.sansMusic);
			AudioInputStream audioStream = AudioSystem.getAudioInputStream(audioFile);
			DataLine.Info info = new DataLine.Info(Clip.class, audioStream.getFormat());
			Clip clipper = (Clip) AudioSystem.getLine(info);
			clipper.open(audioStream);
			clipper.loop(1000);
		}//end of try
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}//end of catch
		
		//Viewing Window
		frame = new JFrame();
		frame.addKeyListener(new keyListener());
		frame.getContentPane().setBackground(Color.BLACK);
		frame.setBounds(100, 100, WINDOW_LENGTH, WINDOW_HEIGHT);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		//Fight Button
		fight = new JLabel("");
		fight.setBackground(Color.BLACK);
		icon = new ImageIcon(UltraClass.class.getResource(Constants.fightImage));
		fight.setIcon(resize(icon, BUTTON_WIDTH, BUTTON_HEIGHT));
		fight.setBounds(110, 666, BUTTON_WIDTH, BUTTON_HEIGHT);
		frame.getContentPane().add(fight);
		
		//Act Button
		act = new JLabel("");
		act.setBackground(Color.BLACK);
		icon = new ImageIcon(UltraClass.class.getResource(Constants.actImage));
		act.setIcon(resize(icon, BUTTON_WIDTH, BUTTON_HEIGHT));
		act.setBounds(340, 666, BUTTON_WIDTH, BUTTON_HEIGHT);
		frame.getContentPane().add(act);
		
		//Item Button
		item = new JLabel("");
		item.setBackground(Color.BLACK);
		icon = new ImageIcon(UltraClass.class.getResource(Constants.itemImage));
		item.setIcon(resize(icon, BUTTON_WIDTH, BUTTON_HEIGHT));
		item.setBounds(570, 666, BUTTON_WIDTH, BUTTON_HEIGHT);
		frame.getContentPane().add(item);
		
		//Mercy Button
		mercy = new JLabel("");
		mercy.setBackground(Color.BLACK);
		icon = new ImageIcon(UltraClass.class.getResource(Constants.mercyImage));
		mercy.setIcon(resize(icon, BUTTON_WIDTH, BUTTON_HEIGHT));
		mercy.setBounds(800, 666, BUTTON_WIDTH, BUTTON_HEIGHT);
		frame.getContentPane().add(mercy);
		
		//creates hud
		health.addAll(Fonts.intToFont());
		start = convertText("CHARA  LV 19     HP           / " + MAX_HEALTH, "/hud/Hud/", 27);
		
		//double digit health label
		health1 = new JLabel("");
		health1.setBackground(Color.BLACK);
		health1.setBounds(120 + start, 620, 40, 50);
		frame.getContentPane().add(health1);
		
		//single digit health label
		health2 = new JLabel("");
		health2.setBackground(Color.BLACK);
		health2.setBounds(145 + start, 620, 40, 50);
		frame.getContentPane().add(health2);
		
		gaster = new JLabel("");
		gaster.setBackground(Color.BLACK);
		icon = new ImageIcon(UltraClass.class.getResource(gasterPath));
		gaster.setIcon(resize(icon, 150, 150));
		gaster.setBounds(150, 700, 150, 150);
		frame.getContentPane().add(gaster);
		
		blast = new JLabel("");
		gaster.setBackground(Color.BLACK);
		icon = new ImageIcon(UltraClass.class.getResource(blastPath));
		blast.setIcon(resize(icon, 125, 400));
		blast.setBounds(0, 0, 125, 400);
		frame.getContentPane().add(blast);
		blast.setVisible(false);
		
		//initializes health bar
		for (int x = 0; x < MAX_HEALTH * 2; x += 2)
		{
			
			JLabel healthBars = new JLabel("");
			healthBars.setBounds(115 - MAX_HEALTH * 2 + x + start, 630, 2, 30);
			icon = new ImageIcon(UltraClass.class.getResource(Constants.healthFull));
			healthBars.setIcon(resize(icon, 2, 30));
			healthBar.add(healthBars);
			
			frame.getContentPane().add(healthBars);
			
		}//end of for loop
		
		//creates centered battle box of given dimensions and starting y value
		battleBox(length, height, y);
		
		//user selection on buttons
		selection();
		
	}//end of initialize
	
	/**checks damage with bone objects and heart\
	 * 
	 * @pre 	bone spawned
	 * @param 	hitBone
	 * @return	none
	 * @post 	damaged?
	 */
	public void damage(JLabel hitBone)
	{
		if (collision(heart, hitBone))
		{
			if (currentHealth > 0)
			{
				currentHealth--;
			}//end of if
		}//end of if
	}//end of damage
	
	/**
	 * Checks collision
	 * 
	 * @param	x	first label
	 * @param	y	second label
	 * @return	none
	 * @post	collision?
	 */
	public static boolean collision(JLabel x, JLabel y)
	{
		
		if ((x.getX() < y.getX() && x.getX() + x.getIcon().getIconWidth() > y.getX()) || (y.getX() < x.getX() && y.getX() + y.getIcon().getIconWidth() > x.getX()))
		{
			if (x.getY() < y.getY() && x.getY() + x.getIcon().getIconHeight() > y.getY())
			{
				return true;
			}//end of if
			
			else if (y.getY() < x.getY() && y.getY() + y.getIcon().getIconHeight() > x.getY())
			{
				return true;
			}//end of else if
		}//end of if
		
		return false;
	}//end of collision
	
	/**
	 * Initializes battle box
	 * 
	 * @param	l	length of box
	 * @param	h	height of box
	 * @param	y	starting y position
	 * @return	none
	 * @post	the	box is printed on screen
	*/
	private void battleBox(int l, int h, int y)
	{
		//centers battle box
		x = (WINDOW_LENGTH - l) / 2;
		
		//top of box
		icon = new ImageIcon(UltraClass.class.getResource(Constants.battleBox));
		boxTop = new JLabel("");
		boxTop.setIcon(resize(icon, l, h));
		boxTop.setBounds(x, y, l, lineWidth);
		frame.getContentPane().add(boxTop);
		
		//bottom of box
		boxBottom = new JLabel("");
		boxBottom.setIcon(resize(icon, l, lineWidth));
		boxBottom.setBounds(x, y + h, l, lineWidth);
		frame.getContentPane().add(boxBottom);
		
		//left side of box
		boxLeft = new JLabel("");
		boxLeft.setIcon(resize(icon, lineWidth, h));
		boxLeft.setBounds(x, y, lineWidth, h);
		frame.getContentPane().add(boxLeft);
		
		//right side of box
		boxRight = new JLabel("");
		boxRight.setIcon(resize(icon, lineWidth, h));
		boxRight.setBounds(x + l, y, lineWidth, h);
		frame.getContentPane().add(boxRight);
		
		//initializes heart
		heart = new JLabel("");
		icon = new ImageIcon(UltraClass.class.getResource(Constants.heart));
		heart.setIcon(resize(icon, 20, 19));
		heart.setBounds(heartStartX, heartStartY, 20, 19);
		frame.getContentPane().add(heart);
		
		//initializes sans
		sans = new JLabel("");
		image = new ImageIcon(UltraClass.class.getResource(Constants.sansNatural));
		sans.setIcon(resize(image, 150, 200));
		sans.setBounds(500,100,150,200);
		frame.getContentPane().add(sans);
	}//end of battleBox
	
	/**
	 * Prints out converted text
	 * 
	 * @param	word	string to be converted to ImageIcons
	 * @param	file	class file to get font pictures
	 * @param	start	length of string to health
	 * @return	start	offset for health
	 * @post	the		ArrayList of ImageIcons is printed on the screen
	*/
	private int convertText(String word, String file, int start)
	{
		
		//converts given string to an arrayList of imageIcons
		text.addAll(Fonts.addFont(word, file));
		int s = start;
		start = 0;
		
		//finds appropriate starting offset for health
		for (int x = 0; x < s; x++)
		{
			start += 25;
		}//end of for loop
		
		//prints out hud
		for (int x = 0; x < text.size(); x++)
		{
			JLabel hud = new JLabel("");
			hud.setBackground(Color.BLACK);
			hud.setIcon(resize(text.get(x), 20, 25));
			hud.setBounds(120 + 25 * x, 620, 40, 50);
			frame.getContentPane().add(hud);
		}//end of for loop
		return start;
	}//end of convertText
	
	/**
	 * Resizes images
	 * Assistance from Aaron Lampert
	 * edited by Alden Bauman & Euan Fotheringham
	 * @param	img		image for scaling
	 * @param	w		desired width
	 * @param	h		desired height
	 * @return	img		resized image
	 * 
	 * @post	the image is resized
	 */
	public ImageIcon resize(ImageIcon img, int w, int h)
	{
		return new ImageIcon(img.getImage().getScaledInstance(w, h, Image.SCALE_DEFAULT));
	}//end of resize
	
	/**
	 * Button choice
	 * 
	 * @param	none
	 * @return	none
	 * @post	selection changed
	 */
	private void selection()
	{
			switch (selected)
			{
			
				//fight button
				case 0: icon = new ImageIcon(UltraClass.class.getResource(Constants.fightSelected));
						fight.setIcon(resize(icon, BUTTON_WIDTH, BUTTON_HEIGHT));
						icon = new ImageIcon(UltraClass.class.getResource(Constants.actImage));
						act.setIcon(resize(icon, BUTTON_WIDTH, BUTTON_HEIGHT));
						heart.setLocation(HEART_MOVE * selected + heartStartX, heartStartY);
						break;
						
				//act button
				case 1: icon = new ImageIcon(UltraClass.class.getResource(Constants.actSelected));
						act.setIcon(resize(icon, BUTTON_WIDTH, BUTTON_HEIGHT));
						icon = new ImageIcon(UltraClass.class.getResource(Constants.fightImage));
						fight.setIcon(resize(icon, BUTTON_WIDTH, BUTTON_HEIGHT));
						icon = new ImageIcon(UltraClass.class.getResource(Constants.itemImage));
						item.setIcon(resize(icon, BUTTON_WIDTH, BUTTON_HEIGHT));
						heart.setLocation(HEART_MOVE * selected + heartStartX, heartStartY);
						break;
						
				//item button
				case 2: icon = new ImageIcon(UltraClass.class.getResource(Constants.actImage));
						act.setIcon(resize(icon, BUTTON_WIDTH, BUTTON_HEIGHT));
						icon = new ImageIcon(UltraClass.class.getResource(Constants.mercyImage));
						mercy.setIcon(resize(icon, BUTTON_WIDTH, BUTTON_HEIGHT));
						icon = new ImageIcon(UltraClass.class.getResource(Constants.itemSelected));
						item.setIcon(resize(icon, BUTTON_WIDTH, BUTTON_HEIGHT));
						heart.setLocation(HEART_MOVE * selected + heartStartX, heartStartY);
						break;
						
				//mercy button
				case 3: icon = new ImageIcon(UltraClass.class.getResource(Constants.mercySelected));
						mercy.setIcon(resize(icon, BUTTON_WIDTH, BUTTON_HEIGHT));
						icon = new ImageIcon(UltraClass.class.getResource(Constants.itemImage));
						item.setIcon(resize(icon, BUTTON_WIDTH, BUTTON_HEIGHT));
						heart.setLocation(HEART_MOVE * selected + heartStartX, heartStartY);
						break;
			}//end of switch case
	}//end of selection

	/**
	 * Prints health bar
	 * @param	health		health before modification
	 * @param	damage		did they heal or were they hurt?
	 * @return	none
	 * @post	Prints health bar
	 */
	private void setHealthBar(int health, int damage)
	{
		if (damage > health)
		{
			while (damage > health)
			{
				healthBar.get(health).setIcon(resize(damageTaken, 2, 30));
				health++;
			}//end of while
		}//end of if
		else
		{
			while (damage < health)
			{
				healthBar.get(health - 1).setIcon(resize(healed, 2, 30));
				health--;
			}//end of while
		}//end of else
	}//end of setHealthBar
	
	/**
	 * Initializes Combo
	 * @param	none
	 * @return	none
	 * @post	Combo initialized
	 */
	private void doTheBones()
	{
		attacks.get(attacks.size() - 1).moveSet(this);
	}//end of doTheBones
	
	/**Executes moves and returns true when all attacks from the combo are executed
	 * 
	 * @pre			attack started
	 * @param x		spot in ArrayList
	 * @return		is the combo attack done?
	 * @post		attacks in this spot executed
	 */
	private boolean collisionWithObject(int x)
	{
		return attacks.get(x).executeMoves(count1, this);
	}//end of collisionWithObject
	
	SwingWorker<Object, Object> movePlayer = new SwingWorker<Object, Object>()
	{
		/**
		 * Infinite background loop that creates tick rate
		 * 
		 * @param	none
		 * @return	none
		 * @post	none
		 * @Override
		*/
		protected Object doInBackground() throws Exception 
		{
			while(true)
			{
				count1++;
				

				gaster.setLocation(0,-250);
				
				if(heart.getBounds().intersects(blast.getBounds()))
				{
					currentHealth -= 1;
				}
				
				
				int i = 0;
				
				if(count1 > 200)
				{
					firing = true;

					gaster.setLocation(num, 100);
					gaster.setIcon(new ImageIcon(UltraClass.class.getResource(gasterPath)));
					
				}
				
				if(count1 > 300)
				{
					gaster.setIcon(new ImageIcon(UltraClass.class.getResource(gasterOpen)));

					blast.setLocation(num + 30, 225);
					blast.setVisible(true);
				}
				
				if(count1 > 400)
				{
					blast.setLocation(0,0);
					blast.setVisible(false);
					gaster.setLocation(0,-250);
					count1 = 0;
					num = ran.nextInt(500) + 200;
				}
				
				sans.setLocation(sans.getX() - 10, sans.getY());
				
				
				
				if (currentHealth <= 0)
				{
					deathScreen();
				}//end of if
				
				if (battler < battleProgression && in.hasNextLine())
				{
					battler = battleProgression;
					fightOrder.clear();
					move = in.nextLine();
					
					while(move.indexOf(' ') != -1)
					{
						fightOrder.add(move.substring(0, move.indexOf(" ")));
						move = move.substring(move.indexOf(" ") + 1, move.length());
					}//end of while loop
					fightOrder.add(move.substring(0, move.length()));
					
					for (int x = 0; x < fightOrder.size(); x++)
					{
						if (fightOrder.indexOf("bonejump") != -1)
						{
							Combo boneAttack = new BoneJump();
							attacks.add(boneAttack);
							doTheBones();
							
						}//end of if
						else if (fightOrder.indexOf("bonesmash") == -1)
						{
							Combo boneAttack = new GravityBoneSmash();
							attacks.add(boneAttack);
							doTheBones();
						}//end of else if
					}//end of for loop
				}//end of if
				
				if (battle > 1 && attacks.size() > 0)
				{
					if (collisionWithObject(currentMove))
					{
						if (currentMove < attacks.size())
						{
							attacks.remove(0);
						}//end of if
						if (attacks.size() == 0)
						{
							attacks.clear();
							battle = 0;
							selected = 0;
							battleProgression++;
							selection();
						}//end of else
					}//end of if
					
				}
					
				
				count1++; 
				
				if (gravity && jumped)
				{					
					gravityFall += GRAVITY;					
					if (falling && gravityFall < 3)
					{						
						gravityFall += GRAVITY;		
					}//end of if
				}//end of if
				
				if (battle > 1)
				{
					if (heart.getX() + heart.getWidth() < boxRight.getX())
					{					
						jumped = true;
						
						if(rightPressed)
						{						
							heart.setLocation(heart.getX() + 4, heart.getY());						
						}//end of if
						
						if (gravityDirection ==  LEFT && gravity)
						{						
							heart.setLocation(heart.getX() + (int) gravityFall, heart.getY());						
						}//end of if
						
						if (heart.getX() + heart.getWidth() > boxRight.getX())
						{	
							heart.setLocation(boxRight.getX() - heart.getWidth(), heart.getY());			
						}//end of if
					}//end of if				
					else if (gravityDirection ==  LEFT)
					{					
						jumped = false;
						falling = false;
						gravityFall = 0;					
					}//end of else
						
					if (heart.getX() > boxLeft.getX() + boxLeft.getWidth())
					{					
						jumped = true;
						
						if(leftPressed)
						{					
							heart.setLocation(heart.getX() - 4, heart.getY());					
						}//end of if
						
						if (gravityDirection ==  RIGHT && gravity)
						{						
							heart.setLocation(heart.getX() - (int) gravityFall, heart.getY());						
						}//end of if	
						
						if (heart.getX() < boxLeft.getX() + boxLeft.getWidth())
						{
							heart.setLocation(boxLeft.getX() + boxLeft.getWidth(), heart.getY());			
						}//end of if
							
					}//end of if
					else if (gravityDirection ==  RIGHT)
					{					
						jumped = false;
						falling = false;
						gravityFall = 0;					
					}//end of else
					
					if (heart.getY() > boxTop.getY() + boxTop.getHeight())
					{					
						jumped = true;
						
						if(upPressed)
						{						
							heart.setLocation(heart.getX(), heart.getY() - 4);						
						}//end of if
						
						if (gravityDirection ==  UP && gravity)
						{						
							heart.setLocation(heart.getX(), heart.getY() - (int) gravityFall);						
						}//end of if
						
						if (heart.getX() < boxTop.getX() + boxTop.getHeight())
						{	
							heart.setLocation(heart.getX(), boxTop.getX() + boxTop.getHeight());						
						}//end of if
					}//end of if
					else if (gravityDirection ==  UP)
					{					
						jumped = false;
						falling = false;
						gravityFall = 0;					
					}//end of else
						
					if (heart.getY() + heart.getHeight() < boxBottom.getY() )
					{					
						jumped = true;
						
						if(downPressed)
						{						
							heart.setLocation(heart.getX(), heart.getY() + 4);						
						}//end of if
											
						if (gravityDirection == DOWN && gravity)
						{						
							heart.setLocation(heart.getX(), heart.getY() + (int) gravityFall);						
						}//end of if	
						
						if (heart.getY() + heart.getHeight() > boxBottom.getY())
						{		
							heart.setLocation(heart.getX(), boxBottom.getY() - heart.getHeight());			
						}//end of if
					}//end of if
					else if (gravityDirection == DOWN)
					{					
						jumped = false;
						falling = false;
						gravityFall = 0;					
					}//end of else
				}//end of if
				
				//first digit of health
				icon = new ImageIcon(UltraClass.class.getResource("/hud/Hud/" + (currentHealth / 10) + ".png"));
				health1.setIcon(resize(icon, 20, 25));
				
				//second digit of health
				icon = new ImageIcon(UltraClass.class.getResource("/hud/Hud/" + (currentHealth % 10) + ".png"));
				health2.setIcon(resize(icon, 20, 25));
				
				if (damage != currentHealth)
				{
					setHealthBar(currentHealth, damage);
					damage = currentHealth;
					damaged = false;					
				}//end of if
				
				sans.setLocation(sans.getX() + 10, sans.getY());

				
				//tick rate
				Thread.sleep(16);
			}//end of while loop			
		}//end of doInBackground		
	};
			
	/**
	 * This class will detect key presses
	 * 
	 * @author Alden Bauman
	 * @edited Euan Fotheringham
	 */
	class keyListener implements KeyListener
	{
		
		/**
		 * Starts movement on key press
		 * 
		 * @param	e		key was pressed
		 * @return	none
		 * @post	movement is started based on key press
		 * @Override
		*/
		
		public void keyPressed(KeyEvent e)
		{			
			if(e.getKeyCode() == KeyEvent.VK_RIGHT)
			{				
				if (battle < 2)
				{					
					if (selected < 3)
					{					
						selected++;
						selection();						
					}//end of if					
				}//end of if				
				else
				{					
					if (gravityDirection != LEFT || !gravity)
					{						
						rightPressed = true;
						
						if (!falling)
						{						
							jumped = true;
							
						}//end of if						
					}//end of if					
				}//end of else				
			}//end of if
			
			if(e.getKeyCode() == KeyEvent.VK_LEFT)
			{				
				if (battle < 2)
				{				
					if (selected > 0)
					{						
						selected--;
						selection();						
					}//end of if					
				}//end of if				
				else
				{					
					if (gravityDirection != RIGHT || !gravity)
					{						
						leftPressed = true;
						
						if (!falling)
						{							
							jumped = true;							
						}//end of if						
					}//end of if					
				}//end of else				
			}//end of if
			
			if(e.getKeyCode() == KeyEvent.VK_K)
			{		
				Combo boneAttack = new BoneJump();
				attacks.add(boneAttack);
				doTheBones();
			}
			
			if(e.getKeyCode() == KeyEvent.VK_Z)
			{				
				if (battle > 1)
				{					
					battle = 0;
					selected = 0;
					selection();					
				}//end of if
				
				else if (battle > 0)
				{					
					heart.setLocation(WINDOW_LENGTH / 2, WINDOW_HEIGHT / 2);
					battle++;				
				}//end of else if
				
				else
				{					
					battle++;
					
					if (selected == 0)
					{						
						heart.setLocation(WINDOW_LENGTH / 2, WINDOW_HEIGHT / 2);
						battle++;
						//battleProgression++;						
					}//end of if					
				}//end of else				
			}//end of if
			
			if(e.getKeyCode() == KeyEvent.VK_Q)
			{
				currentHealth = 0;				
			}//end of if
			
			if(e.getKeyCode() == KeyEvent.VK_V)
			{				
				if (damaged == false)
				{				
					if (currentHealth > 0)
					{					
						currentHealth -= 1;
						damaged = true;						
					}//end of if
					
				}//end of if
				
				if (battle == 1)
				{					
					battle--;					
				}//end of if				
			}//end of if
			
			if(e.getKeyCode() == KeyEvent.VK_C)
			{				
				if (currentHealth != MAX_HEALTH)
				{					
					currentHealth = MAX_HEALTH;
					damaged = true;					
				}//end of if				
			}//end of if
			
			if(e.getKeyCode() == KeyEvent.VK_G)
			{			
				gravity = !gravity;
				gravityFall = 0;	
				if (gravity)
				{
					icon = new ImageIcon(UltraClass.class.getResource(Constants.blueHeart));
					heart.setIcon(resize(icon, 20, 19));
				}
				else
				{
					icon = new ImageIcon(UltraClass.class.getResource(Constants.heart));
					heart.setIcon(resize(icon, 20, 19));
				}
			}//end of if
			
			if(e.getKeyCode() == KeyEvent.VK_UP)
			{				
				if (battle > 1)
				{					
					if  (gravityDirection != UP || !gravity)
					{						
						upPressed = true;	
						
						if (!falling)
						{							
							jumped = true;							
						}//end of if						
					}//end of if					
				}//end of if				
			}//end of if
			
			if(e.getKeyCode() == KeyEvent.VK_DOWN)
			{			
				if (battle > 1)
				{				
					if  (gravityDirection != DOWN || !gravity)
					{				
						downPressed = true;
						
						if (!falling)
						{						
							jumped = true;						
						}//end of if					
					}//end of if				
				}//end of if			
			}//end of if
			
			if(e.getKeyCode() == KeyEvent.VK_W)
			{			
				gravityDirection = UP;				
			}//end of if
			
			if(e.getKeyCode() == KeyEvent.VK_A)
			{				
				gravityDirection = RIGHT;				
			}//end of if
			
			if(e.getKeyCode() == KeyEvent.VK_S)
			{				
				gravityDirection = DOWN;				
			}//end of if
			
			if(e.getKeyCode() == KeyEvent.VK_D)
			{				
				gravityDirection = LEFT;				
			}//end of if
			
		}//end of keyPressed

		
		/**
		 * Stops movement on key release
		 * 
		 * @param	e		key was released
		 * @return	none
		 * @post	movement is stopped based on key release
		 * @Override
		*/
		public void keyReleased(KeyEvent e)
		{		
			if(e.getKeyCode() == KeyEvent.VK_RIGHT)
			{			
				rightPressed = false;
				
				if (!falling && gravityDirection == LEFT)
				{					
					gravityFall = (int) gravityFall - 1;					
				}//end of if
				
				falling = true;			
			}//end of if
			
			if(e.getKeyCode() == KeyEvent.VK_LEFT)
			{			
				leftPressed = false;
				
				if (!falling && gravityDirection == RIGHT)
				{					
					gravityFall = (int) gravityFall - 1;					
				}//end of if
				
				falling = true;				
			}//end of if
			
			if(e.getKeyCode() == KeyEvent.VK_UP)
			{				
				upPressed = false;
				
				if (!falling && gravityDirection == DOWN)
				{					
					gravityFall = (int) gravityFall - 1;					
				}//end of if
				
				falling = true;				
			}//end of if
			
			if(e.getKeyCode() == KeyEvent.VK_DOWN)
			{				
				downPressed = false;
				
				if (!falling && gravityDirection == UP)
				{					
					gravityFall = (int) gravityFall - 1;					
				}//end of if
				
				falling = true;				
			}//end of if			
		}//end of keyReleased

		@Override
		public void keyTyped(KeyEvent e) 
		{
			
		}//end of keyTyped
	}//end of class keyListener
	
	/**
	 * Player dies and game exits when health reaches 0
	 * 
	 * @pre		player health at 0
	 * @param	none
	 * @return	none
	 * @post	game exits
	*/
	private void deathScreen()
	{
		
		icon = new ImageIcon(UltraClass.class.getResource("/hud/Hud/Space.png"));
		health1.setIcon(icon);
		fight.setIcon(icon);
		item.setIcon(icon);
		mercy.setIcon(icon);
		act.setIcon(icon);
		health2.setIcon(icon);
		boxTop.setIcon(icon);
		boxLeft.setIcon(icon);
		boxRight.setIcon(icon);
		boxBottom.setIcon(icon);
		
		for (int x = 0; x < healthBar.size(); x++)
		{
			healthBar.get(x).setIcon(icon);
		}//end of for loop
		healthBar.clear();
		
		icon = new ImageIcon(UltraClass.class.getResource(Constants.breakingHeart));
		heart.setIcon(icon);	
		
		try 
		{			
			Thread.sleep(750);			
		} //end of try
		
		catch (InterruptedException e) 
		{			
			e.printStackTrace();			
		}//end of catch		
		
		icon = new ImageIcon(UltraClass.class.getResource(Constants.brokenHeart));
		heart.setIcon(icon);		
		
		try 
		{			
			Thread.sleep(1500);			
		} //end of try
		
		catch (InterruptedException e)
		{			
			e.printStackTrace();
		}//end of catch
		
		System.exit(0);		
	}//end of class deathScreen	
}//end of class UltraClass
